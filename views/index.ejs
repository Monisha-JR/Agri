<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climate Monitor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .dashboard-card {
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .dashboard-card:hover {
            transform: translateY(-5px);
        }
        .card-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        .reading-value {
            font-size: 2.5rem;
            font-weight: bold;
        }
        .reading-unit {
            font-size: 1.2rem;
            color: #666;
        }
        .status-indicator {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }
        .status-good {
            background-color: #28a745;
        }
        .status-warning {
            background-color: #ffc107;
        }
        .status-danger {
            background-color: #dc3545;
        }
        .last-updated {
            font-size: 0.8rem;
            color: #666;
            margin-top: 10px;
        }
        .navbar-brand {
            font-size: 1.5rem;
            font-weight: bold;
        }
        .chart-container {
            height: 300px;
            margin-top: 20px;
        }
        .nav-pills .nav-link.active {
            background-color: #198754;
        }
        .navbar {
            box-shadow: 0 2px 4px rgba(0,0,0,.1);
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-success mb-4">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-leaf me-2"></i>Climate Monitor
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/index"><i class="fas fa-home me-1"></i> Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/history"><i class="fas fa-history me-1"></i> History</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/analysis"><i class="fas fa-chart-line me-1"></i> Analysis</a>
                    </li>
                    <!-- Add logout button here -->
                    <li class="nav-item">
                        <a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt me-1"></i> Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Main Dashboard -->
        <div class="row mb-4">
            <div class="col-12">
                <h2 class="mb-3">Current Climate Conditions</h2>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> 
                    Dashboard showing real-time temperature, humidity, and soil moisture readings from IoT sensors.
                </div>
            </div>
        </div>

        <!-- Sensor Cards -->
        <div class="row mb-4">
            <!-- Temperature Card -->
            <div class="col-md-4 mb-4">
                <div class="card dashboard-card h-100 bg-white">
                    <div class="card-body text-center p-4">
                        <i class="fas fa-temperature-high card-icon text-danger"></i>
                        <h5 class="card-title">Temperature</h5>
                        <p class="reading-value mb-0"><%= latestData.temperature ? latestData.temperature.toFixed(1) : "N/A" %> <span class="reading-unit">Â°C</span></p>
                        <div class="mt-3">
                            <% 
                            let tempStatus = 'good';
                            let tempMessage = 'Normal';
                            
                            if (latestData.temperature > 30) {
                                tempStatus = 'danger';
                                tempMessage = 'High';
                            } else if (latestData.temperature < 10) {
                                tempStatus = 'warning';
                                tempMessage = 'Low';
                            }
                            %>
                            <span class="status-indicator status-<%= tempStatus %>"></span>
                            <span><%= tempMessage %> Temperature</span>
                        </div>
                        <% if (latestData.timestamp) { %>
                            <p class="last-updated">Updated: <%= new Date(latestData.timestamp).toLocaleString() %></p>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Humidity Card -->
            <div class="col-md-4 mb-4">
                <div class="card dashboard-card h-100 bg-white">
                    <div class="card-body text-center p-4">
                        <i class="fas fa-tint card-icon text-primary"></i>
                        <h5 class="card-title">Humidity</h5>
                        <p class="reading-value mb-0"><%= latestData.humidity ? latestData.humidity.toFixed(1) : "N/A" %> <span class="reading-unit">%</span></p>
                        <div class="mt-3">
                            <% 
                            let humidityStatus = 'good';
                            let humidityMessage = 'Normal';
                            
                            if (latestData.humidity > 80) {
                                humidityStatus = 'warning';
                                humidityMessage = 'High';
                            } else if (latestData.humidity < 30) {
                                humidityStatus = 'warning';
                                humidityMessage = 'Low';
                            }
                            %>
                            <span class="status-indicator status-<%= humidityStatus %>"></span>
                            <span><%= humidityMessage %> Humidity</span>
                        </div>
                        <% if (latestData.timestamp) { %>
                            <p class="last-updated">Updated: <%= new Date(latestData.timestamp).toLocaleString() %></p>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Soil Moisture Card -->
            <div class="col-md-4 mb-4">
                <div class="card dashboard-card h-100 bg-white">
                    <div class="card-body text-center p-4">
                        <i class="fas fa-seedling card-icon text-success"></i>
                        <h5 class="card-title">Soil Moisture</h5>
                        <p class="reading-value mb-0">
                            <%= latestData.soilMoisture ? latestData.soilMoisture.toFixed(1) : "N/A" %> <span class="reading-unit">%</span>
                        </p>
                        <div class="mt-3">
                            <% 
                            let moistureStatus = 'good';
                            let moistureMessage = 'Normal';
                            
                            if (latestData.soilMoisture && latestData.soilMoisture > 80) {
                                moistureStatus = 'warning';
                                moistureMessage = 'Too Wet';
                            } else if (latestData.soilMoisture && latestData.soilMoisture < 30) {
                                moistureStatus = 'danger';
                                moistureMessage = 'Too Dry';
                            }
                            %>
                            <span class="status-indicator status-<%= moistureStatus %>"></span>
                            <span><%= moistureMessage %> Soil</span>
                        </div>
                        <% if (latestData.timestamp) { %>
                            <p class="last-updated">Updated: <%= new Date(latestData.timestamp).toLocaleString() %></p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="row">
            <div class="col-12 mb-4">
                <div class="card dashboard-card">
                    <div class="card-body">
                        <ul class="nav nav-pills mb-3" id="chart-tabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="temperature-tab" data-bs-toggle="pill" 
                                    data-bs-target="#temperature-chart" type="button" role="tab">Temperature</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="humidity-tab" data-bs-toggle="pill" 
                                    data-bs-target="#humidity-chart" type="button" role="tab">Humidity</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="moisture-tab" data-bs-toggle="pill" 
                                    data-bs-target="#moisture-chart" type="button" role="tab">Soil Moisture</button>
                            </li>
                        </ul>
                        <div class="tab-content" id="chart-content">
                            <div class="tab-pane fade show active" id="temperature-chart" role="tabpanel">
                                <div class="chart-container">
                                    <canvas id="temperatureChart"></canvas>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="humidity-chart" role="tabpanel">
                                <div class="chart-container">
                                    <canvas id="humidityChart"></canvas>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="moisture-chart" role="tabpanel">
                                <div class="chart-container">
                                    <canvas id="moistureChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Climate Advice Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card dashboard-card">
                    <div class="card-body">
                        <h5><i class="fas fa-lightbulb text-warning me-2"></i>Climate Insights</h5>
                        <hr>
                        <div id="climateAdvice">
                            <!-- Content will be generated based on current readings -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-dark text-light py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h5><i class="fas fa-leaf me-2"></i>Climate Monitor</h5>
                    <p>Real-time environmental monitoring with IoT technology</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p>Â© <%= new Date().getFullYear() %> Climate Monitor</p>
                    <p class="mb-0">Powered by ThingSpeak & IoT Sensors</p>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Prepare chart data from the server data
        const historicalData = <%- JSON.stringify(historicalData || []) %>;
        
        // Format timestamps and extract data
        const timestamps = historicalData.map(entry => {
            const date = new Date(entry.timestamp);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        });
        
        const temperatures = historicalData.map(entry => entry.temperature || null);
        const humidities = historicalData.map(entry => entry.humidity || null);
        const soilMoistures = historicalData.map(entry => entry.soilMoisture || null);
        console.log("Historical data length:", historicalData.length);
        console.log("Temperature data:", temperatures);
        console.log("Timestamps:", timestamps);
        
        // Create Temperature Chart
        const tempCtx = document.getElementById('temperatureChart').getContext('2d');
        const temperatureChart = new Chart(tempCtx, {
            type: 'line',
            data: {
                labels: timestamps,
                datasets: [{
                    label: 'Temperature (Â°C)',
                    data: temperatures,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        title: {
                            display: true,
                            text: 'Temperature (Â°C)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                }
            }
        });
        
        // Create Humidity Chart
        const humidityCtx = document.getElementById('humidityChart').getContext('2d');
        const humidityChart = new Chart(humidityCtx, {
            type: 'line',
            data: {
                labels: timestamps,
                datasets: [{
                    label: 'Humidity (%)',
                    data: humidities,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        title: {
                            display: true,
                            text: 'Humidity (%)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                }
            }
        });
        
        // Create Soil Moisture Chart
        const moistureCtx = document.getElementById('moistureChart').getContext('2d');
        const moistureChart = new Chart(moistureCtx, {
            type: 'line',
            data: {
                labels: timestamps,
                datasets: [{
                    label: 'Soil Moisture (%)',
                    data: soilMoistures,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        title: {
                            display: true,
                            text: 'Soil Moisture (%)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                }
            }
        });

        // Generate climate advice based on current readings
        function generateClimateAdvice() {
            const adviceDiv = document.getElementById('climateAdvice');
            const tempValue = <%= latestData.temperature || 0 %>;
            const humidityValue = <%= latestData.humidity || 0 %>;
            const soilMoistureValue = <%= latestData.soilMoisture || 0 %>;
            
            let advice = '<div class="row">';
            
            // Temperature advice
            advice += '<div class="col-md-4 mb-3">';
            advice += '<h6><i class="fas fa-temperature-high text-danger me-2"></i>Temperature</h6>';
            
            if (tempValue > 30) {
                advice += '<p>The temperature is quite high. Consider the following:</p>';
                advice += '<ul>';
                advice += '<li>Ensure plants have adequate shade</li>';
                advice += '<li>Water more frequently to prevent drying</li>';
                advice += '<li>Monitor for heat stress in plants</li>';
                advice += '</ul>';
            } else if (tempValue < 10) {
                advice += '<p>The temperature is quite low. Consider the following:</p>';
                advice += '<ul>';
                advice += '<li>Protect sensitive plants from frost</li>';
                advice += '<li>Reduce watering frequency</li>';
                advice += '<li>Consider adding mulch for insulation</li>';
                advice += '</ul>';
            } else {
                advice += '<p>Temperature conditions are favorable for most plants.</p>';
            }
            advice += '</div>';
            
            // Humidity advice
            advice += '<div class="col-md-4 mb-3">';
            advice += '<h6><i class="fas fa-tint text-primary me-2"></i>Humidity</h6>';
            
            if (humidityValue > 80) {
                advice += '<p>Humidity is quite high. Be aware of:</p>';
                advice += '<ul>';
                advice += '<li>Increased risk of fungal diseases</li>';
                advice += '<li>Reduce overhead watering</li>';
                advice += '<li>Ensure good air circulation</li>';
                advice += '</ul>';
            } else if (humidityValue < 30) {
                advice += '<p>Humidity is quite low. Consider:</p>';
                advice += '<ul>';
                advice += '<li>Misting sensitive plants</li>';
                advice += '<li>Using a humidity tray</li>';
                advice += '<li>Grouping plants together</li>';
                advice += '</ul>';
            } else {
                advice += '<p>Humidity levels are within a good range for most plants.</p>';
            }
            advice += '</div>';
            
            // Soil moisture advice
            advice += '<div class="col-md-4 mb-3">';
            advice += '<h6><i class="fas fa-seedling text-success me-2"></i>Soil Moisture</h6>';
            
            if (soilMoistureValue === 0) {
                advice += '<p>No soil moisture data available.</p>';
            } else if (soilMoistureValue > 80) {
                advice += '<p>Soil is quite wet. Consider:</p>';
                advice += '<ul>';
                advice += '<li>Hold off on watering</li>';
                advice += '<li>Check for proper drainage</li>';
                advice += '<li>Monitor for root rot</li>';
                advice += '</ul>';
            } else if (soilMoistureValue < 30) {
                advice += '<p>Soil is quite dry. Consider:</p>';
                advice += '<ul>';
                advice += '<li>Water plants thoroughly</li>';
                advice += '<li>Apply mulch to retain moisture</li>';
                advice += '<li>Check irrigation systems</li>';
                advice += '</ul>';
            } else {
                advice += '<p>Soil moisture levels are optimal for most plants.</p>';
            }
            advice += '</div>';
            
            advice += '</div>';
            adviceDiv.innerHTML = advice;
        }
        
        // Call function when page loads
        generateClimateAdvice();

        // Auto-refresh the page every 5 minutes to get latest data
        setTimeout(() => {
            window.location.reload();
        }, 5 * 60 * 1000);

    // Add this script at the end of your existing script section in index.ejs
// This function will fetch the latest data from the server and update the dashboard
function fetchLatestData() {
    fetch('/api/sensor-data')
        .then(response => response.json())
        .then(data => {
            if (data && data.length > 0) {
                const latestData = data[0]; // Get the most recent reading
                
                // Update temperature card
                const tempElement = document.querySelector('.col-md-4:nth-child(1) .reading-value');
                if (tempElement && latestData.temperature) {
                    tempElement.innerHTML = `${latestData.temperature.toFixed(1)} <span class="reading-unit">Â°C</span>`;
                    
                    // Update temperature status
                    const tempStatusIndicator = document.querySelector('.col-md-4:nth-child(1) .status-indicator');
                    const tempStatusMessage = document.querySelector('.col-md-4:nth-child(1) .status-indicator + span');
                    
                    if (latestData.temperature > 30) {
                        tempStatusIndicator.className = 'status-indicator status-danger';
                        tempStatusMessage.textContent = 'High Temperature';
                    } else if (latestData.temperature < 10) {
                        tempStatusIndicator.className = 'status-indicator status-warning';
                        tempStatusMessage.textContent = 'Low Temperature';
                    } else {
                        tempStatusIndicator.className = 'status-indicator status-good';
                        tempStatusMessage.textContent = 'Normal Temperature';
                    }
                }
                
                // Update humidity card
                const humidityElement = document.querySelector('.col-md-4:nth-child(2) .reading-value');
                if (humidityElement && latestData.humidity) {
                    humidityElement.innerHTML = `${latestData.humidity.toFixed(1)} <span class="reading-unit">%</span>`;
                    
                    // Update humidity status
                    const humidityStatusIndicator = document.querySelector('.col-md-4:nth-child(2) .status-indicator');
                    const humidityStatusMessage = document.querySelector('.col-md-4:nth-child(2) .status-indicator + span');
                    
                    if (latestData.humidity > 80) {
                        humidityStatusIndicator.className = 'status-indicator status-warning';
                        humidityStatusMessage.textContent = 'High Humidity';
                    } else if (latestData.humidity < 30) {
                        humidityStatusIndicator.className = 'status-indicator status-warning';
                        humidityStatusMessage.textContent = 'Low Humidity';
                    } else {
                        humidityStatusIndicator.className = 'status-indicator status-good';
                        humidityStatusMessage.textContent = 'Normal Humidity';
                    }
                }
                
                // Update soil moisture card
                const soilMoistureElement = document.querySelector('.col-md-4:nth-child(3) .reading-value');
                if (soilMoistureElement && latestData.soilMoisture) {
                    soilMoistureElement.innerHTML = `${latestData.soilMoisture.toFixed(1)} <span class="reading-unit">%</span>`;
                    
                    // Update soil moisture status
                    const soilMoistureStatusIndicator = document.querySelector('.col-md-4:nth-child(3) .status-indicator');
                    const soilMoistureStatusMessage = document.querySelector('.col-md-4:nth-child(3) .status-indicator + span');
                    
                    if (latestData.soilMoisture > 80) {
                        soilMoistureStatusIndicator.className = 'status-indicator status-warning';
                        soilMoistureStatusMessage.textContent = 'Too Wet';
                    } else if (latestData.soilMoisture < 30) {
                        soilMoistureStatusIndicator.className = 'status-indicator status-danger';
                        soilMoistureStatusMessage.textContent = 'Too Dry';
                    } else {
                        soilMoistureStatusIndicator.className = 'status-indicator status-good';
                        soilMoistureStatusMessage.textContent = 'Normal Soil';
                    }
                }
                
                // Update last updated timestamps
                const lastUpdatedElements = document.querySelectorAll('.last-updated');
                const formattedTime = new Date(latestData.timestamp).toLocaleString();
                lastUpdatedElements.forEach(element => {
                    element.textContent = `Updated: ${formattedTime}`;
                });
                
                // Update charts with new data
                updateCharts(data);
                
                // Update climate advice based on new readings
                generateClimateAdvice(latestData.temperature, latestData.humidity, latestData.soilMoisture);
            }
        })
        .catch(error => console.error('Error fetching latest data:', error));
}

// Function to update all three charts with new data
function updateCharts(data) {
    // Sort data by timestamp (oldest to newest)
    data = data.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
    
    // Take only the most recent data points (last 24 entries or whatever makes sense)
    const recentData = data.slice(-24);
    
    // Format timestamps and extract data
    const timestamps = recentData.map(entry => {
        const date = new Date(entry.timestamp);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    });
    
    const temperatures = recentData.map(entry => entry.temperature || null);
    const humidities = recentData.map(entry => entry.humidity || null);
    const soilMoistures = recentData.map(entry => entry.soilMoisture || null);
    
    // Update temperature chart
    temperatureChart.data.labels = timestamps;
    temperatureChart.data.datasets[0].data = temperatures;
    temperatureChart.update();
    
    // Update humidity chart
    humidityChart.data.labels = timestamps;
    humidityChart.data.datasets[0].data = humidities;
    humidityChart.update();
    
    // Update soil moisture chart
    moistureChart.data.labels = timestamps;
    moistureChart.data.datasets[0].data = soilMoistures;
    moistureChart.update();
}

// Updated function to generate climate advice based on current readings
function generateClimateAdvice(tempValue, humidityValue, soilMoistureValue) {
    const adviceDiv = document.getElementById('climateAdvice');
    
    let advice = '<div class="row">';
    
    // Temperature advice
    advice += '<div class="col-md-4 mb-3">';
    advice += '<h6><i class="fas fa-temperature-high text-danger me-2"></i>Temperature</h6>';
    
    if (tempValue > 30) {
        advice += '<p>The temperature is quite high. Consider the following:</p>';
        advice += '<ul>';
        advice += '<li>Ensure plants have adequate shade</li>';
        advice += '<li>Water more frequently to prevent drying</li>';
        advice += '<li>Monitor for heat stress in plants</li>';
        advice += '</ul>';
    } else if (tempValue < 10) {
        advice += '<p>The temperature is quite low. Consider the following:</p>';
        advice += '<ul>';
        advice += '<li>Protect sensitive plants from frost</li>';
        advice += '<li>Reduce watering frequency</li>';
        advice += '<li>Consider adding mulch for insulation</li>';
        advice += '</ul>';
    } else {
        advice += '<p>Temperature conditions are favorable for most plants.</p>';
    }
    advice += '</div>';
    
    // Humidity advice
    advice += '<div class="col-md-4 mb-3">';
    advice += '<h6><i class="fas fa-tint text-primary me-2"></i>Humidity</h6>';
    
    if (humidityValue > 80) {
        advice += '<p>Humidity is quite high. Be aware of:</p>';
        advice += '<ul>';
        advice += '<li>Increased risk of fungal diseases</li>';
        advice += '<li>Reduce overhead watering</li>';
        advice += '<li>Ensure good air circulation</li>';
        advice += '</ul>';
    } else if (humidityValue < 30) {
        advice += '<p>Humidity is quite low. Consider:</p>';
        advice += '<ul>';
        advice += '<li>Misting sensitive plants</li>';
        advice += '<li>Using a humidity tray</li>';
        advice += '<li>Grouping plants together</li>';
        advice += '</ul>';
    } else {
        advice += '<p>Humidity levels are within a good range for most plants.</p>';
    }
    advice += '</div>';
    
    // Soil moisture advice
    advice += '<div class="col-md-4 mb-3">';
    advice += '<h6><i class="fas fa-seedling text-success me-2"></i>Soil Moisture</h6>';
    
    if (soilMoistureValue === 0 || soilMoistureValue === null || soilMoistureValue === undefined) {
        advice += '<p>No soil moisture data available.</p>';
    } else if (soilMoistureValue > 80) {
        advice += '<p>Soil is quite wet. Consider:</p>';
        advice += '<ul>';
        advice += '<li>Hold off on watering</li>';
        advice += '<li>Check for proper drainage</li>';
        advice += '<li>Monitor for root rot</li>';
        advice += '</ul>';
    } else if (soilMoistureValue < 30) {
        advice += '<p>Soil is quite dry. Consider:</p>';
        advice += '<ul>';
        advice += '<li>Water plants thoroughly</li>';
        advice += '<li>Apply mulch to retain moisture</li>';
        advice += '<li>Check irrigation systems</li>';
        advice += '</ul>';
    } else {
        advice += '<p>Soil moisture levels are optimal for most plants.</p>';
    }
    advice += '</div>';
    
    advice += '</div>';
    adviceDiv.innerHTML = advice;
}

// Set up regular polling for data updates (every 30 seconds)
const updateInterval = 20 * 1000; // 30 seconds in milliseconds
setInterval(fetchLatestData, updateInterval);

// Initial data fetch when page loads
document.addEventListener('DOMContentLoaded', () => {
    // First call happens after the DOM is fully loaded
    setTimeout(fetchLatestData, 1000);
});

// Replace the auto-refresh page functionality with our polling approach
// Remove or comment out this code:
/*
setTimeout(() => {
    window.location.reload();
}, 5 * 60 * 1000);
*/
    </script>
</body>
</html>